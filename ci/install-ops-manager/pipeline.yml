---
resource_types:
- name: google-cloud-storage
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: platform-automation-tasks
  type: google-cloud-storage
  source:
    bucket: ((gcs_bucket_name))
    regexp: platform-automation-tasks-(.*).zip
    json_key: |
      ((gcp_credentials))

- name: platform-automation-image
  type: google-cloud-storage
  source:
    bucket: ((gcs_bucket_name))
    regexp: platform-automation-image-(.*).tgz
    json_key: |
      ((gcp_credentials))

- name: opsman-image
  type: google-cloud-storage
  source:
    bucket: ((gcs_bucket_name))
    regexp: OpsManager(.*)onGCP.yml
    json_key: |
      ((gcp_credentials))

- name: configuration
  type: google-cloud-storage
  source:
    bucket: ((gcs_bucket_name))
    versioned_file: opsman.yml
    json_key: |
      ((gcp_credentials))

- name: variable
  type: google-cloud-storage
  source:
    bucket: ((gcs_bucket_name))
    versioned_file: opsman-vars.yml
    json_key: |
      ((gcp_credentials))

jobs:
- name: install-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
#     - get: one-time-trigger
#       trigger: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: opsman-image
    - get: configuration
    - get: variable
  - task: create-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: opsman-image
      state: configuration
      config: configuration
      vars: variable
    params:
#      VARS_FILES: vars/private.yml
      VARS_FILES: vars/opsman-vars.yml
#     STATE_FILE: ((foundation))/state/state.yml
      OPSMAN_CONFIG_FILE: opsman.yml
#     ensure: &make-state-commit
#       do:
#         - task: make-commit
#           image: platform-automation-image
#           file: platform-automation-tasks/tasks/make-git-commit.yml
#           input_mapping:
#             repository: configuration
#             file-source: generated-state
#           output_mapping:
#             repository-commit: configuration-commit
#           params:
#             FILE_SOURCE_PATH: state.yml
#             FILE_DESTINATION_PATH: ((foundation))/state/state.yml
#             GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@example.com"
#             GIT_AUTHOR_NAME: "PCF Automation Bot"
#             COMMIT_MESSAGE: 'Update state file'
#         - put: configuration
#           params:
#             repository: configuration-commit
#             merge: true
